apiVersion: apps/v1
kind: Deployment
metadata:
  name: feed-server
  namespace: sns
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: feed-server
  template:
    metadata:
      labels:
        app: feed-server
    spec:
      volumes:
        - name: logs
          persistentVolumeClaim:
            claimName: spring-app-logs
      containers:
        - name: feed-container
          image: {{AWS_ACCOUNT_ID}}.dkr.ecr.{{AWS_REGION}}.amazonaws.com/{{ECR_FEED_SERVER_REPO}}:${IMAGE_TAG}
          volumeMounts:
            - name: logs
              mountPath: /logss
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: dev
            - name: USER_SERVICE
              value: http://user-service.sns.svc.cluster.local:8080
          envFrom:
            - configMapRef:
                name: mysql-config
            - secretRef:
                name: mysql-secret
            - configMapRef:
                name: kafka-config
            - secretRef:
                name: kafka-secret
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 10"]
          readinessProbe:
            httpGet:
              path: /healthcheck/ready
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /healthcheck/live
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 1
            failureThreshold: 7
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: spring-app-logs
  namespace: sns
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-sc
  resources:
    requests:
      storage: 5Gi